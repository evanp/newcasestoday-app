{"version":3,"sources":["NewCasesToday.js","App.js","reportWebVitals.js","reducer.js","index.js"],"names":["NewCasesToday","props","className","data-testid","newCases","delta","Math","abs","App","location","useSelector","state","lastDate","timeline","dispatch","useDispatch","useEffect","fetch","then","res","text","data","split","map","line","filter","row","length","datum","parseInt","sda","value","idx","arr","pts","slice","max","round","reduce","a","b","recent","type","document","title","min","color","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","Date","toISOString","store","createStore","currentState","action","applyMiddleware","thunk","render","getElementById"],"mappings":"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","file":"static/js/main.039a9461.chunk.js","sourcesContent":["import './NewCasesToday.css';\n\nexport default function NewCasesToday(props) {\n  \n  return <div>\n      <span className='NewCasesToday' data-testid='new-cases-today'>+{props.newCases}</span>\n      (<span className='delta' data-testid='delta'>{(props.delta >= 0) ? '+' : '-'}{Math.abs(props.delta)}</span>)\n      </div>\n}\n\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport NewCasesToday from './NewCasesToday';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Sparklines, SparklinesCurve, SparklinesSpots, SparklinesReferenceLine } from 'react-sparklines';\n\nconst MONTREAL_URL = \"https://data.newcasestoday.app/city/CA/CA_MTR.csv\"\n\nfunction App(props) {\n\n  const location = \"Montreal\";\n\n  const newCases = useSelector(state => state.newCases)\n  const lastDate = useSelector(state => state.lastDate)\n  const delta = useSelector(state => state.delta)\n  const timeline = useSelector(state => state.timeline)\n\n  const dispatch = useDispatch();\n\n  function getNewCasesToday() {\n    return dispatch => {\n        fetch(MONTREAL_URL)\n        .then(res => res.text())\n        .then(text => {\n          const lines = text.split('\\n')\n          const rows = lines.map(line => line.split(';'))\n          const data = rows.filter(row => row[0].length > 0)\n          const timeline = data.map(datum => parseInt(datum[1]))\n          const sda = timeline.map((value, idx, arr) => {\n            const pts = arr.slice(Math.max(idx - 7, 0), idx + 1);\n            return (pts.length == 0) ? 0 : Math.round(pts.reduce((a, b) => a + b)/pts.length)\n          })        \n          const recent = sda.slice(-28)\n          const lastDate =  data[data.length - 1][0]\n          const newCases = timeline[timeline.length - 1]\n          const delta = newCases - timeline[timeline.length - 2]\n\n          if (data.length > 0) {\n              dispatch({\n                  type: \"FETCH_NEW_CASES\",\n                  data: {\n                      lastDate: lastDate,\n                      newCases: newCases,\n                      delta: delta,\n                      sda: sda[sda.length - 1],\n                      timeline: recent\n                  }\n              });\n          }\n      });\n    };\n  }\n\n  useEffect(() => {\n    dispatch(getNewCasesToday());\n  });\n\n  document.title = `New COVID-19 cases in ${location} as of ${lastDate}`;\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"App-title\">New COVID-19 cases in {location} as of <span data-testid=\"last-date\">{lastDate}</span></div>\n        <NewCasesToday newCases={newCases} delta={delta} min={0} />\n        <Sparklines data={timeline}>\n          <SparklinesCurve color=\"red\" />\n          <SparklinesReferenceLine type=\"median\" />\n          <SparklinesSpots />\n        </Sparklines>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","let initialState = {\n    lastDate: (new Date()).toISOString().slice(0, 10),\n    newCases: 0,\n    delta: 0,\n    sda: 0,\n    timeline: []\n}\n\nexport default function reducer(currentState = initialState, action) {\n\n    switch (action.type) {\n        case \"FETCH_NEW_CASES\":\n            return { lastDate: action.data.lastDate, newCases: action.data.newCases, delta: action.data.delta, sda: action.data.sda, timeline: action.data.timeline }\n        default:\n            return currentState\n    }\n}","import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './reducer';\n\nconst store = createStore(reducer, applyMiddleware(thunk))\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}