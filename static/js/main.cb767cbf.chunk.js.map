{"version":3,"sources":["NewCasesToday.js","App.js","reportWebVitals.js","reducer.js","index.js"],"names":["NewCasesToday","newCases","useSelector","state","lastDate","delta","dispatch","useDispatch","useEffect","fetch","then","res","text","data","split","map","line","filter","row","length","latest","parseInt","type","className","data-testid","Math","abs","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","Date","toISOString","slice","store","createStore","currentState","action","applyMiddleware","thunk","render","document","getElementById"],"mappings":"8NAMe,SAASA,IACpB,IAAMC,EAAWC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,YACtCG,EAAWF,aAAY,SAAAC,GAAK,OAAIA,EAAMC,YACtCC,EAAQH,aAAY,SAAAC,GAAK,OAAIA,EAAME,SACnCC,EAAWC,cA8BjB,OAJAC,qBAAU,WACRF,GAxBO,SAAAA,GACHG,MAVW,eAWVC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACJ,IAEMC,EAFQD,EAAKE,MAAM,MACNC,KAAI,SAAAC,GAAI,OAAIA,EAAKF,MAAM,QACxBG,QAAO,SAAAC,GAAG,OAAIA,EAAI,GAAGC,OAAS,KAC1CC,EAASP,EAAKA,EAAKM,OAAS,GAC5Bd,EAAQgB,SAASD,EAAO,GAAI,IAAMC,SAASR,EAAKA,EAAKM,OAAS,GAAG,GAAI,IACvEC,GACAd,EAAS,CACLgB,KAAM,kBACNT,KAAM,CACFT,SAAUgB,EAAO,GACjBnB,SAAUoB,SAASD,EAAO,GAAI,IAC9Bf,MAAOA,cAYpB,gCACH,qBAAKkB,UAAU,WAAWC,cAAY,YAAtC,SAAmDpB,IACnD,sBAAKmB,UAAU,gBAAgBC,cAAY,kBAA3C,cAA+DvB,KAC/D,sBAAKsB,UAAU,QAAQC,cAAY,QAAnC,UAA6CnB,GAAS,EAAK,IAAM,IAAKoB,KAAKC,IAAIrB,SC7BxEsB,MAXf,WACE,OACE,qBAAKJ,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,qCAEE,cAAC,EAAD,UCIOK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,qBCPVO,EAAe,CACfhC,UAAW,IAAIiC,MAAQC,cAAcC,MAAM,EAAG,IAC9CtC,SAAU,EACVI,MAAO,MCOX,IAAMmC,EAAQC,aDJC,WAAuD,IAAtCC,EAAqC,uDAAtBN,EAAcO,EAAQ,uCAEjE,OAAQA,EAAOrB,MACX,IAAK,kBACD,MAAO,CAAElB,SAAUuC,EAAO9B,KAAKT,SAAUH,SAAU0C,EAAO9B,KAAKZ,SAAUI,MAAOsC,EAAO9B,KAAKR,OAChG,QACI,OAAOqC,KCFgBE,YAAgBC,MAEnDC,iBACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFO,SAASC,eAAe,SAM1BpB,K","file":"static/js/main.cb767cbf.chunk.js","sourcesContent":["import React, {useEffect} from 'react';\nimport './NewCasesToday.css';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst MONTREAL_URL = \"/courbe.csv\"\n\nexport default function NewCasesToday() {\n    const newCases = useSelector(state => state.newCases)\n    const lastDate = useSelector(state => state.lastDate)\n    const delta = useSelector(state => state.delta)\n    const dispatch = useDispatch();\n  \n    function getNewCasesToday() {\n      return dispatch => {\n          fetch(MONTREAL_URL)\n          .then(res => res.text())\n          .then(text => {\n            const lines = text.split('\\n')\n            const rows = lines.map(line => line.split(';'))\n            const data = rows.filter(row => row[0].length > 0)\n            const latest = data[data.length - 1]\n            const delta = parseInt(latest[1], 10) - parseInt(data[data.length - 2][1], 10)\n            if (latest) {\n                dispatch({\n                    type: \"FETCH_NEW_CASES\",\n                    data: {\n                        lastDate: latest[0],\n                        newCases: parseInt(latest[1], 10),\n                        delta: delta\n                    }\n                });\n            }\n        });\n      };\n    }\n  \n    useEffect(() => {\n      dispatch(getNewCasesToday());\n    });\n\n    return <div>\n        <div className='lastDate' data-testid='last-date'>{lastDate}</div>\n        <div className='NewCasesToday' data-testid='new-cases-today'>+{newCases}</div>\n        <div className='delta' data-testid='delta'>{(delta >= 0) ? '+' : '-'}{Math.abs(delta)}</div>\n        </div>\n}\n\n","import './App.css';\nimport NewCasesToday from './NewCasesToday';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        New COVID-19 Cases Today\n        <NewCasesToday />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","let initialState = {\n    lastDate: (new Date()).toISOString().slice(0, 10),\n    newCases: 0,\n    delta: null\n}\n\nexport default function reducer(currentState = initialState, action) {\n\n    switch (action.type) {\n        case \"FETCH_NEW_CASES\":\n            return { lastDate: action.data.lastDate, newCases: action.data.newCases, delta: action.data.delta }\n        default:\n            return currentState\n    }\n}","import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './reducer';\n\nconst store = createStore(reducer, applyMiddleware(thunk))\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}