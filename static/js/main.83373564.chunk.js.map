{"version":3,"sources":["NewCasesToday.js","App.js","reportWebVitals.js","reducer.js","index.js"],"names":["NewCasesToday","props","className","data-testid","newCases","delta","Math","abs","App","useSelector","state","lastDate","timeline","dispatch","useDispatch","useEffect","fetch","then","res","text","data","split","map","line","filter","row","length","latest","parseInt","slice","datum","type","min","color","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","Date","toISOString","store","createStore","currentState","action","applyMiddleware","thunk","render","document","getElementById"],"mappings":"6OAEe,SAASA,EAAcC,GAEpC,OAAO,gCACH,uBAAMC,UAAU,gBAAgBC,cAAY,kBAA5C,cAAgEF,EAAMG,YADnE,IAEF,uBAAMF,UAAU,QAAQC,cAAY,QAApC,UAA8CF,EAAMI,OAAS,EAAK,IAAM,IAAKC,KAAKC,IAAIN,EAAMI,UAF1F,O,kBC6DMG,MAzDf,SAAaP,GAEX,IAEMG,EAAWK,aAAY,SAAAC,GAAK,OAAIA,EAAMN,YACtCO,EAAWF,aAAY,SAAAC,GAAK,OAAIA,EAAMC,YACtCN,EAAQI,aAAY,SAAAC,GAAK,OAAIA,EAAML,SACnCO,EAAWH,aAAY,SAAAC,GAAK,OAAIA,EAAME,YAEtCC,EAAWC,cAkCjB,OAJAC,qBAAU,WACRF,GA5BO,SAAAA,GACHG,MAfa,qDAgBZC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACJ,IAEMC,EAFQD,EAAKE,MAAM,MACNC,KAAI,SAAAC,GAAI,OAAIA,EAAKF,MAAM,QACxBG,QAAO,SAAAC,GAAG,OAAIA,EAAI,GAAGC,OAAS,KAC1CC,EAASP,EAAKA,EAAKM,OAAS,GAC5BrB,EAAQuB,SAASD,EAAO,GAAI,IAAMC,SAASR,EAAKA,EAAKM,OAAS,GAAG,GAAI,IAErEd,EADQQ,EAAKS,OAAM,IACFP,KAAI,SAAAQ,GAAK,OAAIA,EAAM,MAEtCH,GACAd,EAAS,CACLkB,KAAM,kBACNX,KAAM,CACFT,SAAUgB,EAAO,GACjBvB,SAAUwB,SAASD,EAAO,GAAI,IAC9BtB,MAAOA,EACPO,SAAUA,cAa5B,qBAAKV,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,sBAAKA,UAAU,YAAf,mCA5CW,WA4CX,UAAkE,sBAAMC,cAAY,YAAlB,SAA+BQ,OACjG,cAAC,EAAD,CAAeP,SAAUA,EAAUC,MAAOA,EAAO2B,IAAK,IACtD,eAAC,aAAD,CAAYZ,KAAMR,EAAlB,UACE,cAAC,kBAAD,CAAiBqB,MAAM,QACvB,cAAC,kBAAD,aC9CKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,qBCPVO,EAAe,CACf/B,UAAW,IAAIgC,MAAQC,cAAcf,MAAM,EAAG,IAC9CzB,SAAU,EACVC,MAAO,EACPO,SAAU,CAAC,ICMf,IAAMiC,EAAQC,aDHC,WAAuD,IAAtCC,EAAqC,uDAAtBL,EAAcM,EAAQ,uCAEjE,OAAQA,EAAOjB,MACX,IAAK,kBACD,MAAO,CAAEpB,SAAUqC,EAAO5B,KAAKT,SAAUP,SAAU4C,EAAO5B,KAAKhB,SAAUC,MAAO2C,EAAO5B,KAAKf,MAAOO,SAAUoC,EAAO5B,KAAKR,UAC7H,QACI,OAAOmC,KCHgBE,YAAgBC,MAEnDC,iBACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFO,SAASC,eAAe,SAM1BnB,M","file":"static/js/main.83373564.chunk.js","sourcesContent":["import './NewCasesToday.css';\n\nexport default function NewCasesToday(props) {\n  \n  return <div>\n      <span className='NewCasesToday' data-testid='new-cases-today'>+{props.newCases}</span>\n      (<span className='delta' data-testid='delta'>{(props.delta >= 0) ? '+' : '-'}{Math.abs(props.delta)}</span>)\n      </div>\n}\n\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport NewCasesToday from './NewCasesToday';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Sparklines, SparklinesCurve, SparklinesSpots } from 'react-sparklines';\n\nconst MONTREAL_URL = \"https://data.newcasestoday.app/city/CA/CA_MTR.csv\"\n\nfunction App(props) {\n\n  const location = \"Montreal\";\n\n  const newCases = useSelector(state => state.newCases)\n  const lastDate = useSelector(state => state.lastDate)\n  const delta = useSelector(state => state.delta)\n  const timeline = useSelector(state => state.timeline)\n\n  const dispatch = useDispatch();\n\n  function getNewCasesToday() {\n    return dispatch => {\n        fetch(MONTREAL_URL)\n        .then(res => res.text())\n        .then(text => {\n          const lines = text.split('\\n')\n          const rows = lines.map(line => line.split(';'))\n          const data = rows.filter(row => row[0].length > 0)\n          const latest = data[data.length - 1]\n          const delta = parseInt(latest[1], 10) - parseInt(data[data.length - 2][1], 10)\n          const trend = data.slice(-28 * 2)\n          const timeline = trend.map(datum => datum[1])\n\n          if (latest) {\n              dispatch({\n                  type: \"FETCH_NEW_CASES\",\n                  data: {\n                      lastDate: latest[0],\n                      newCases: parseInt(latest[1], 10),\n                      delta: delta,\n                      timeline: timeline\n                  }\n              });\n          }\n      });\n    };\n  }\n\n  useEffect(() => {\n    dispatch(getNewCasesToday());\n  });\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"App-title\">New COVID-19 cases in {location} as of <span data-testid=\"last-date\">{lastDate}</span></div>\n        <NewCasesToday newCases={newCases} delta={delta} min={0} />\n        <Sparklines data={timeline}>\n          <SparklinesCurve color=\"red\" />\n          <SparklinesSpots />\n        </Sparklines>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","let initialState = {\n    lastDate: (new Date()).toISOString().slice(0, 10),\n    newCases: 0,\n    delta: 0,\n    timeline: [0]\n}\n\nexport default function reducer(currentState = initialState, action) {\n\n    switch (action.type) {\n        case \"FETCH_NEW_CASES\":\n            return { lastDate: action.data.lastDate, newCases: action.data.newCases, delta: action.data.delta, timeline: action.data.timeline }\n        default:\n            return currentState\n    }\n}","import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './reducer';\n\nconst store = createStore(reducer, applyMiddleware(thunk))\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}